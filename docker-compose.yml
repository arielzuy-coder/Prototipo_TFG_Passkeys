version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: auth_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-auth_passkeys}
      POSTGRES_USER: ${DB_USER:-authuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-authpass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Python FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auth_backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-authuser}:${DB_PASSWORD:-authpass123}@postgres:5432/${DB_NAME:-auth_passkeys}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET: ${JWT_SECRET:-jwt-secret-change-in-production}
      RP_ID: ${RP_ID:-localhost}
      RP_NAME: ${RP_NAME:-Prototipo Auth TFG}
      ORIGIN: ${ORIGIN:-https://localhost}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - auth_network
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: auth_frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
    networks:
      - auth_network
    command: npm start

  # Nginx como reverse proxy con SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: auth_nginx
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - auth_network

volumes:
  postgres_data:

networks:
  auth_network:
    driver: bridge