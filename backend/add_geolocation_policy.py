#!/usr/bin/env python3
"""
Script para agregar pol√≠tica de geolocalizaci√≥n al sistema Zero Trust.

Este script agrega una pol√≠tica de alta prioridad que requiere step-up
para accesos desde fuera de Argentina.

Uso:
    python add_geolocation_policy.py --diagnose    # Ver estado actual
    python add_geolocation_policy.py --add         # Agregar pol√≠tica
    python add_geolocation_policy.py --verify      # Verificar implementaci√≥n

Autor: TFG - Sistema de Autenticaci√≥n Adaptativa
Fecha: 2025-10-31
"""

import sys
import os
import argparse
from datetime import datetime

# Agregar directorio actual al path
sys.path.insert(0, os.path.dirname(__file__))

try:
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    from models import Policy
    from config import settings
    from sqlalchemy.exc import SQLAlchemyError
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de ejecutar este script desde el directorio backend/")
    sys.exit(1)

# Configuraci√≥n de la nueva pol√≠tica
GEOLOCATION_POLICY = {
    'name': 'foreign_country_stepup',
    'description': 'Requiere step-up para accesos desde fuera de Argentina',
    'conditions': {'allowed_countries': ['AR']},
    'action': 'stepup',
    'priority': 0
}

def print_header(text):
    """Imprime un header formateado."""
    print("\n" + "="*80)
    print(f" {text}")
    print("="*80 + "\n")

def diagnose_policies(db):
    """Muestra el estado actual de las pol√≠ticas."""
    
    print_header("üîç DIAGN√ìSTICO: Estado Actual de las Pol√≠ticas")
    
    policies = db.query(Policy).order_by(Policy.priority.asc()).all()
    
    if not policies:
        print("‚ö†Ô∏è  NO HAY POL√çTICAS EN LA BASE DE DATOS\n")
        return False
    
    print(f"üìä Total de pol√≠ticas: {len(policies)}\n")
    
    # Verificar si existe la pol√≠tica de geolocalizaci√≥n
    geo_policy = db.query(Policy).filter(
        Policy.name == GEOLOCATION_POLICY['name']
    ).first()
    
    if geo_policy:
        print("‚úÖ La pol√≠tica de geolocalizaci√≥n YA EXISTE:")
        print(f"   ‚Ä¢ Nombre: {geo_policy.name}")
        print(f"   ‚Ä¢ Prioridad: {geo_policy.priority}")
        print(f"   ‚Ä¢ Condiciones: {geo_policy.conditions}")
        print(f"   ‚Ä¢ Acci√≥n: {geo_policy.action}")
        print(f"   ‚Ä¢ Habilitada: {geo_policy.enabled}\n")
    else:
        print("‚ö†Ô∏è  La pol√≠tica de geolocalizaci√≥n NO EXISTE\n")
    
    # Mostrar todas las pol√≠ticas
    print("üìã Pol√≠ticas actuales:\n")
    for i, policy in enumerate(policies, 1):
        status = "‚úÖ" if policy.enabled else "‚ùå"
        print(f"[{policy.priority}] {status} {policy.name}")
        print(f"    ‚îî‚îÄ Acci√≥n: {policy.action.upper()}")
        print(f"    ‚îî‚îÄ Condiciones: {policy.conditions}")
        print()
    
    # Simulaci√≥n de caso de uso
    print_header("üß™ SIMULACI√ìN: Acceso desde USA")
    
    print("Contexto:")
    print("  ‚Ä¢ Usuario: usuario@ejemplo.com")
    print("  ‚Ä¢ IP: 169.197.85.172 (USA)")
    print("  ‚Ä¢ Dispositivo: CASA (conocido)")
    print("  ‚Ä¢ Score de riesgo: 11.75")
    print()
    
    if geo_policy and geo_policy.enabled:
        print("‚úÖ Resultado ACTUAL:")
        print("   [0] foreign_country_stepup ‚Üí Pa√≠s US no est√° en ['AR']")
        print("   ‚Üí Acci√≥n: STEPUP ‚úÖ")
        print("   ‚Üí Nivel de Riesgo: HIGH")
        print("   ‚Üí Verificaci√≥n adicional requerida\n")
    else:
        print("‚ùå Resultado ACTUAL:")
        print("   [3] low_risk_allow ‚Üí Score 11.75 ‚â§ 39")
        print("   ‚Üí Acci√≥n: ALLOW ‚ùå")
        print("   ‚Üí Nivel de Riesgo: LOW")
        print("   ‚Üí Acceso directo (INCORRECTO)\n")
        print("‚ö†Ô∏è  NECESITAS agregar la pol√≠tica de geolocalizaci√≥n")
    
    return geo_policy is not None

def add_geolocation_policy(db):
    """Agrega la pol√≠tica de geolocalizaci√≥n."""
    
    print_header("‚ú® AGREGANDO POL√çTICA DE GEOLOCALIZACI√ìN")
    
    try:
        # 1. Verificar si ya existe
        existing = db.query(Policy).filter(
            Policy.name == GEOLOCATION_POLICY['name']
        ).first()
        
        if existing:
            print(f"‚ö†Ô∏è  La pol√≠tica '{GEOLOCATION_POLICY['name']}' ya existe.")
            print(f"   Prioridad actual: {existing.priority}")
            
            response = input("\n¬øDeseas eliminarla y recrearla? (s/n): ")
            if response.lower() not in ['s', 'si', 'y', 'yes']:
                print("\n‚ùå Operaci√≥n cancelada.\n")
                return False
            
            print(f"\nüóëÔ∏è  Eliminando pol√≠tica existente...")
            db.delete(existing)
            db.commit()
            print("‚úÖ Pol√≠tica eliminada.\n")
        
        # 2. Ajustar prioridades de pol√≠ticas existentes
        print("üîÑ Ajustando prioridades de pol√≠ticas existentes...")
        policies_to_update = db.query(Policy).filter(
            Policy.priority >= 0
        ).all()
        
        updated_count = 0
        for policy in policies_to_update:
            old_priority = policy.priority
            policy.priority = policy.priority + 1
            print(f"   ‚Ä¢ {policy.name}: {old_priority} ‚Üí {policy.priority}")
            updated_count += 1
        
        db.commit()
        print(f"‚úÖ {updated_count} pol√≠ticas actualizadas.\n")
        
        # 3. Crear nueva pol√≠tica de geolocalizaci√≥n
        print("‚ú® Creando pol√≠tica de geolocalizaci√≥n...")
        
        new_policy = Policy(
            name=GEOLOCATION_POLICY['name'],
            description=GEOLOCATION_POLICY['description'],
            conditions=GEOLOCATION_POLICY['conditions'],
            action=GEOLOCATION_POLICY['action'],
            priority=GEOLOCATION_POLICY['priority'],
            enabled=True
        )
        
        db.add(new_policy)
        db.commit()
        
        print(f"‚úÖ Pol√≠tica creada:")
        print(f"   ‚Ä¢ Nombre: {new_policy.name}")
        print(f"   ‚Ä¢ Prioridad: {new_policy.priority}")
        print(f"   ‚Ä¢ Condiciones: {new_policy.conditions}")
        print(f"   ‚Ä¢ Acci√≥n: {new_policy.action}\n")
        
        # 4. Verificar
        print("üîç Verificando creaci√≥n...")
        policies = db.query(Policy).order_by(Policy.priority.asc()).all()
        
        print(f"   Total de pol√≠ticas: {len(policies)}")
        
        geo_policy = policies[0] if policies else None
        if geo_policy and geo_policy.name == GEOLOCATION_POLICY['name']:
            print(f"   ‚úÖ Pol√≠tica de geolocalizaci√≥n en prioridad 0\n")
            return True
        else:
            print(f"   ‚ö†Ô∏è  Advertencia: La pol√≠tica no est√° en prioridad 0\n")
            return False
            
    except SQLAlchemyError as e:
        print(f"\n‚ùå ERROR: {e}")
        db.rollback()
        return False

def verify_implementation(db):
    """Verifica que la implementaci√≥n sea correcta."""
    
    print_header("‚úÖ VERIFICACI√ìN DE IMPLEMENTACI√ìN")
    
    policies = db.query(Policy).order_by(Policy.priority.asc()).all()
    
    if not policies:
        print("‚ùå ERROR: No hay pol√≠ticas en la base de datos.\n")
        return False
    
    # Verificar pol√≠tica de geolocalizaci√≥n
    geo_policy = policies[0] if policies else None
    
    if not geo_policy or geo_policy.name != GEOLOCATION_POLICY['name']:
        print("‚ùå ERROR: La pol√≠tica de geolocalizaci√≥n no est√° en prioridad 0.\n")
        return False
    
    print("üìã Orden de pol√≠ticas:\n")
    for policy in policies:
        status = "‚úÖ" if policy.enabled else "‚ùå"
        print(f"[{policy.priority}] {status} {policy.name}: {policy.action.upper()}")
    
    # Verificar condiciones de la pol√≠tica
    print("\nüîç Verificando configuraci√≥n de geolocalizaci√≥n...")
    
    checks = [
        (geo_policy.conditions == GEOLOCATION_POLICY['conditions'], "Condiciones"),
        (geo_policy.action == GEOLOCATION_POLICY['action'], "Acci√≥n"),
        (geo_policy.priority == GEOLOCATION_POLICY['priority'], "Prioridad"),
        (geo_policy.enabled == True, "Habilitada")
    ]
    
    all_ok = True
    for is_ok, field in checks:
        if is_ok:
            print(f"   ‚úÖ {field}: correcto")
        else:
            print(f"   ‚ùå {field}: incorrecto")
            all_ok = False
    
    if all_ok:
        print("\n" + "="*80)
        print(" ‚úÖ VERIFICACI√ìN EXITOSA")
        print("="*80)
        print("\nüéØ RESULTADO:")
        print("   ‚Ä¢ Pol√≠tica de geolocalizaci√≥n instalada correctamente")
        print("   ‚Ä¢ Accesos desde fuera de Argentina requerir√°n step-up")
        print("   ‚Ä¢ Accesos desde Argentina se evaluar√°n por score\n")
        
        print("üß™ PR√ìXIMAS PRUEBAS:")
        print("   1. Accede desde USA ‚Üí Deber√≠a mostrar HIGH + step-up")
        print("   2. Accede desde Argentina ‚Üí Evaluaci√≥n normal por score\n")
    else:
        print("\n" + "="*80)
        print(" ‚ùå VERIFICACI√ìN FALLIDA")
        print("="*80)
        print("\nAlgunos campos no est√°n configurados correctamente.")
        print("Intenta ejecutar el script con --add nuevamente.\n")
    
    return all_ok

def main():
    """Funci√≥n principal."""
    
    parser = argparse.ArgumentParser(
        description='Agregar pol√≠tica de geolocalizaci√≥n al sistema'
    )
    parser.add_argument(
        '--diagnose',
        action='store_true',
        help='Ver estado actual de las pol√≠ticas'
    )
    parser.add_argument(
        '--add',
        action='store_true',
        help='Agregar pol√≠tica de geolocalizaci√≥n'
    )
    parser.add_argument(
        '--verify',
        action='store_true',
        help='Verificar que la pol√≠tica est√© correctamente instalada'
    )
    
    args = parser.parse_args()
    
    # Si no se especifica ninguna acci√≥n, mostrar ayuda
    if not (args.diagnose or args.add or args.verify):
        parser.print_help()
        print("\nüí° SUGERENCIA: Comienza con --diagnose para ver el estado actual\n")
        return
    
    # Conectar a la base de datos
    print("\nüîå Conectando a la base de datos...")
    
    try:
        engine = create_engine(settings.DATABASE_URL)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        print("‚úÖ Conexi√≥n exitosa\n")
    except Exception as e:
        print(f"‚ùå Error al conectar: {e}\n")
        print("Verifica que:")
        print("  ‚Ä¢ La base de datos est√© accesible")
        print("  ‚Ä¢ Las credenciales en .env sean correctas")
        print("  ‚Ä¢ DATABASE_URL est√© configurado\n")
        return
    
    try:
        # Ejecutar acci√≥n solicitada
        if args.diagnose:
            diagnose_policies(db)
        
        elif args.add:
            # Primero diagnosticar
            exists = diagnose_policies(db)
            
            if exists:
                print("\n‚ö†Ô∏è  La pol√≠tica ya existe.")
                print("   Para recrearla, el script te preguntar√°.\n")
            else:
                print("\n‚û°Ô∏è  Procediendo a agregar la pol√≠tica...\n")
            
            success = add_geolocation_policy(db)
            
            if success:
                print("="*80)
                print(" ‚úÖ POL√çTICA AGREGADA EXITOSAMENTE")
                print("="*80)
                print("\nüìù PR√ìXIMOS PASOS:")
                print("   1. El sistema aplicar√° los cambios inmediatamente")
                print("   2. No necesitas reiniciar el backend en Render")
                print("   3. Prueba accediendo desde USA")
                print("   4. Ejecuta: python add_geolocation_policy.py --verify\n")
            else:
                print("‚ùå La operaci√≥n fall√≥. Revisa los errores.\n")
        
        elif args.verify:
            verify_implementation(db)
    
    finally:
        db.close()
        print("üîå Conexi√≥n cerrada\n")

if __name__ == "__main__":
    main()
