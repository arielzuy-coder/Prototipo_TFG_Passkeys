"""
Script de diagn√≥stico para verificar pol√≠ticas de riesgo en la base de datos.
Ejecutar desde el directorio backend: python check_policies.py
"""

import sys
import os

# Agregar el directorio padre al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from models import Policy
from config import SessionLocal

def check_policies():
    """Verifica las pol√≠ticas activas en la base de datos."""
    
    db = SessionLocal()
    
    try:
        print("\n" + "="*70)
        print("üîç DIAGN√ìSTICO DE POL√çTICAS DE RIESGO")
        print("="*70 + "\n")
        
        # Consultar pol√≠ticas activas
        policies = db.query(Policy).filter(Policy.enabled == True).order_by(Policy.priority.asc()).all()
        
        print(f"üìä Total de pol√≠ticas activas: {len(policies)}\n")
        
        if not policies:
            print("‚ö†Ô∏è  NO HAY POL√çTICAS EN LA BASE DE DATOS")
            print("   El sistema deber√≠a crear pol√≠ticas por defecto autom√°ticamente.\n")
            print("üîß Pol√≠ticas por defecto esperadas:")
            print("   1. high_risk_deny (score ‚â• 75) ‚Üí DENY")
            print("   2. medium_risk_stepup (score 40-74) ‚Üí STEPUP")
            print("   3. low_risk_allow (score ‚â§ 39) ‚Üí ALLOW\n")
        else:
            print("üìã POL√çTICAS ENCONTRADAS:\n")
            
            for i, p in enumerate(policies, 1):
                print(f"--- Pol√≠tica {i} ---")
                print(f"  Nombre: {p.name}")
                print(f"  Descripci√≥n: {p.description}")
                print(f"  Condiciones: {p.conditions}")
                print(f"  Acci√≥n: {p.action}")
                print(f"  Prioridad: {p.priority}")
                print(f"  Habilitada: {p.enabled}")
                print()
                
                # An√°lisis de la pol√≠tica
                conditions = p.conditions
                if 'min_risk_score' in conditions and 'max_risk_score' in conditions:
                    print(f"  üìä Rango: {conditions['min_risk_score']} - {conditions['max_risk_score']}")
                elif 'min_risk_score' in conditions:
                    print(f"  üìä M√≠nimo: {conditions['min_risk_score']} (sin m√°ximo)")
                elif 'max_risk_score' in conditions:
                    print(f"  üìä M√°ximo: {conditions['max_risk_score']} (sin m√≠nimo)")
                    
                print("-" * 50 + "\n")
        
        # An√°lisis del problema reportado
        print("\n" + "="*70)
        print("üêõ AN√ÅLISIS DEL PROBLEMA REPORTADO")
        print("="*70 + "\n")
        
        print("Situaci√≥n:")
        print("  ‚Ä¢ Score de riesgo detectado: 11/100")
        print("  ‚Ä¢ Nivel: LOW")
        print("  ‚Ä¢ Comportamiento actual: Pide STEP-UP")
        print("  ‚Ä¢ Comportamiento esperado: Deber√≠a PERMITIR acceso directamente\n")
        
        print("Verificaci√≥n de pol√≠ticas:")
        
        score_test = 11
        matched_policy = None
        
        for p in policies:
            conditions = p.conditions
            matches = True
            
            if 'min_risk_score' in conditions:
                if score_test < conditions['min_risk_score']:
                    matches = False
                    
            if 'max_risk_score' in conditions:
                if score_test > conditions['max_risk_score']:
                    matches = False
                    
            if matches:
                matched_policy = p
                break
        
        if matched_policy:
            print(f"  ‚úÖ Pol√≠tica que deber√≠a aplicarse: {matched_policy.name}")
            print(f"  ‚öôÔ∏è  Acci√≥n configurada: {matched_policy.action.upper()}")
            
            if matched_policy.action == 'allow':
                print("  ‚úÖ ¬°CORRECTO! La pol√≠tica permite el acceso directo.")
            elif matched_policy.action == 'stepup':
                print("  ‚ùå ¬°ERROR! La pol√≠tica pide step-up cuando NO deber√≠a.")
                print("     Con score de 11, deber√≠a ser 'allow', no 'stepup'.")
            elif matched_policy.action == 'deny':
                print("  ‚ùå ¬°ERROR CR√çTICO! La pol√≠tica deniega el acceso.")
        else:
            print("  ‚ö†Ô∏è  Ninguna pol√≠tica matchea con score=11")
            print("     Esto causar√≠a que se use la pol√≠tica por defecto (allow)")
        
        # Recomendaciones
        print("\n" + "="*70)
        print("üí° RECOMENDACIONES")
        print("="*70 + "\n")
        
        if not policies:
            print("1. Reiniciar la aplicaci√≥n para que cree las pol√≠ticas por defecto")
            print("2. O ejecutar el script reset_policies.sql\n")
        elif matched_policy and matched_policy.action != 'allow':
            print("1. Ejecutar el script reset_policies.sql para resetear las pol√≠ticas")
            print("2. Verificar que no hay pol√≠ticas personalizadas incorrectas")
            print("3. Revisar los logs del backend para ver qu√© pol√≠tica se est√° aplicando\n")
        else:
            print("Las pol√≠ticas parecen correctas. El problema podr√≠a estar en:")
            print("1. La l√≥gica de evaluaci√≥n de pol√≠ticas")
            print("2. El contexto enviado al motor de riesgo")
            print("3. Variables de entorno en Render\n")
        
        print("="*70 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå Error al consultar la base de datos: {str(e)}\n")
        print("Verifica que:")
        print("  ‚Ä¢ La base de datos est√© accesible")
        print("  ‚Ä¢ Las credenciales sean correctas")
        print("  ‚Ä¢ La tabla 'policies' exista\n")
        
    finally:
        db.close()

if __name__ == "__main__":
    check_policies()
